# Complete Gomoku Strategy Guide

## Table of Contents
1. [Basic Principles](#basic-principles)
2. [Opening Theory - Black (First Player)](#opening-theory---black-first-player)
3. [Opening Defense - White (Second Player)](#opening-defense---white-second-player)
4. [Middle Game Tactics](#middle-game-tactics)
5. [Pattern Recognition](#pattern-recognition)
6. [Endgame Strategy](#endgame-strategy)
7. [Implementation Notes for Bots](#implementation-notes-for-bots)

## Basic Principles

### Fundamental Concepts
- **Threat**: A pattern that can lead to five in a row in one move
- **Double Threat**: Creating two threats simultaneously (usually guarantees a win)
- **VCF (Victory by Continuous Fours)**: Forcing sequence using only four-threats
- **VCT (Victory by Continuous Threats)**: Forcing sequence using various threats
- **Tempo**: The advantage of having the next move

### Priority System (Highest to Lowest)
1. **Win immediately** - Complete five in a row
2. **Block opponent's win** - Prevent opponent's five in a row
3. **Create double threat** - Force a win next turn
4. **Block opponent's double threat** - Prevent forced loss
5. **Create single threat** - Force opponent to respond
6. **Improve position** - Extend patterns, control center

## Opening Theory - Black (First Player)

### Guaranteed Winning Strategy

#### Move 1: Center Start
**Position**: Place first stone at (H8) - the center of a 15x15 board
**Reasoning**: Maximum control and flexibility. All winning continuations stem from center control.

```
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . X . . . . . . .  ← Black's first move
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
```

#### Move 2 Responses (Based on White's Response)

**Case 2A: White plays adjacent to center**
If White plays at (H7, H9, G8, or I8):

Black's Response: Create a diagonal pattern
- If White at H7: Black plays G9 or I7
- If White at H9: Black plays G7 or I9  
- If White at G8: Black plays I6 or G10
- If White at I8: Black plays G6 or I10

**Case 2B: White plays at distance 2**
Black should create a 3-stone diagonal or straight line, forcing White into defensive patterns.

**Case 2C: White plays far from center**
Black continues with aggressive center development, typically creating a cross pattern around the center.

### The "Cross Pattern" Strategy

#### Moves 1-5 Sequence:
1. **H8** (center)
2. **G7** (after White's response - creating diagonal pressure)
3. **I9** (extending the diagonal, creating multiple threat directions)
4. **F6** or **J10** (depending on White's blocking attempts)
5. **Create double threat** (specific move depends on White's defense pattern)

### Critical Variations

#### Variation A: White Plays Defensively
When White consistently blocks single threats:
- Black focuses on creating space and multiple weak threats
- Transition to VCT (Victory by Continuous Threats) patterns
- Force White into zugzwang (disadvantageous position)

#### Variation B: White Plays Aggressively  
When White creates counter-threats:
- Black must calculate VCF sequences carefully
- Priority: Block immediate White threats, then continue winning attack
- Use tempo advantage to maintain initiative

## Opening Defense - White (Second Player)

### Defensive Principles
White's goal: Prevent Black from establishing winning patterns while seeking counter-chances.

### Response to Center Opening

#### Move 2: The Contact Play
**Best Response**: Play adjacent to Black's center stone
**Positions**: H7, H9, G8, or I8
**Reasoning**: Forces Black to make concrete decisions early, limits expansion options.

```
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . O . . . . . . .  ← White's response
. . . . . . . . X . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . .
```

### White's Defensive Strategy by Phase

#### Moves 2-6: Disruption Phase
- **Priority**: Prevent Black from forming 3-stone patterns
- **Method**: Play contact moves or at key intersections
- **Goal**: Force Black into suboptimal positions

#### Moves 7-12: Counter-Attack Phase  
- **Priority**: Create own threats while defending
- **Method**: Build parallel patterns or perpendicular counters
- **Goal**: Achieve material balance or superior position

#### Moves 13+: Tactical Phase
- **Priority**: Calculate forced sequences precisely
- **Method**: VCF/VCT calculations
- **Goal**: Draw or exploit Black's errors

### Specific White Responses

#### Against Black's Cross Pattern:
1. Block the longest line first
2. Create perpendicular counter-threats
3. Force Black to defend, gaining tempo

#### Against Black's Diagonal Attack:
1. Play at the intersection of threat lines
2. Create counter-diagonal when possible
3. Use edge constraints to limit Black's expansion

## Middle Game Tactics

### Threat Recognition and Creation

#### Four-in-a-Row Patterns
**Open Four**: `_XXXX_` (Immediate win threat)
**Closed Four**: `XXXX_` or `_XXXX` (Must be blocked)

#### Three-in-a-Row Patterns  
**Open Three**: `_XXX_` (Creates two fours if not blocked)
**Closed Three**: `XXX_` or `_XXX` (Creates one four)

#### Strategic Combinations
**Double Three**: Two open threes sharing no stones (usually wins)
**Three-Four Combination**: Open three + closed four (often wins)

### Forcing Sequences

#### VCF (Victory by Continuous Fours)
A sequence where every move creates a four-threat that must be blocked:

1. Create first four-threat
2. Opponent must block
3. Create second four-threat (using the blocking move)  
4. Continue until five-in-a-row is achieved

**Example VCF Pattern**:
```
Move 1: . X X X _ .  ← Create four-threat
White blocks: . X X X O .
Move 2: _ X X X O X  ← New four-threat using White's stone
Continue until win...
```

#### VCT (Victory by Continuous Threats)
More complex than VCF, using various threat types:
1. Four-threats (must be blocked)
2. Double-three threats (must be blocked)
3. Three-threats (forcing but blockable)

### Position Evaluation

#### Favorable Indicators:
- Control of center region
- Multiple open directions
- Flexible stone placement
- Tempo advantage

#### Unfavorable Indicators:
- Stones clustered in corners/edges  
- Limited expansion options
- Reactive play only
- Multiple weak points

## Pattern Recognition

### Winning Patterns

#### The "Sword" Pattern
```
. . . . .
. X X X .  ← Open three with space for extension
. . . . .
```
*Development*: Can become `_XXXX_` (open four) or create double threats

#### The "Fork" Pattern  
```
. . X . .
. X . . .
X . . . .  ← Diagonal three with branching potential
```
*Development*: Creates multiple threat directions

#### The "Bridge" Pattern
```
X . . . X  ← Two stones with gap
. . X . .  ← Supporting stone
```
*Development*: Hard to defend due to multiple connections

### Defensive Patterns

#### The "Wall" Defense
```
O O O  ← Blocking opponent's line
X X X  
```
*Purpose*: Prevents linear extension

#### The "Scissors" Defense
```
. O . O .  ← Cutting opponent's potential
. . X . .
. O . O .
```
*Purpose*: Limits expansion in multiple directions

## Endgame Strategy

### Endgame Principles
1. **Calculate all forcing sequences** to the end
2. **Count liberties** (available moves) for both sides
3. **Look for quiet moves** that create multiple threats
4. **Consider sacrificial patterns** to gain tempo

### Common Endgame Patterns

#### The "Quiet Move" Win
Sometimes the winning move doesn't create an immediate threat but sets up an unstoppable combination:

```
Before quiet move:     After quiet move:
X X _ X X              X X _ X X
. . . . .              . . Q . .  ← Quiet move
. . . . .              . . . . .
```
*The quiet move 'Q' creates multiple winning threats for next turn*

#### The "Sacrifice" Pattern
Deliberately allow opponent to block one threat to create a stronger one:

```
X X X _    ← Allow opponent to block here
. . . .
_ X X X    ← To create unstoppable four here
```

### Endgame Calculation Method
1. **Identify all immediate threats** (yours and opponent's)
2. **Calculate forced sequences** 3-5 moves deep
3. **Evaluate resulting positions** 
4. **Choose the line** with best guaranteed outcome

## Implementation Notes for Bots

### Algorithm Structure

#### 1. Move Generation Priority
```pseudocode
function getBestMove():
    # Immediate win/loss prevention
    if canWinImmediately(): return winningMove()
    if mustBlockOpponentWin(): return blockingMove()
    
    # Forcing sequences
    vcfMoves = calculateVCF(currentPosition)
    if vcfMoves.isWinning(): return vcfMoves.firstMove()
    
    vctMoves = calculateVCT(currentPosition, depth=5)
    if vctMoves.hasAdvantage(): return vctMoves.bestMove()
    
    # Positional play
    return evaluatePositionalMoves()
```

#### 2. Pattern Recognition Implementation
```pseudocode
class PatternMatcher:
    patterns = [
        {name: "openFour", pattern: "_XXXX_", value: 1000000},
        {name: "closedFour", pattern: "XXXX_", value: 100000},
        {name: "openThree", pattern: "_XXX_", value: 10000},
        # ... more patterns
    ]
    
    function evaluatePosition(board, player):
        score = 0
        for each pattern in patterns:
            matches = findMatches(board, pattern, player)
            score += matches.count * pattern.value
        return score
```

#### 3. Search Algorithm
Recommended: **Alpha-Beta Pruning** with **Iterative Deepening**

```pseudocode
function alphabeta(position, depth, alpha, beta, maximizing):
    if depth == 0 or isGameOver(position):
        return evaluatePosition(position)
    
    moves = generateMoves(position)
    moves = sortMovesByHeuristic(moves)  # Critical for pruning
    
    if maximizing:
        maxEval = -infinity
        for move in moves:
            eval = alphabeta(makeMove(position, move), depth-1, alpha, beta, false)
            maxEval = max(maxEval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha: break  # Beta cutoff
        return maxEval
    else:
        # Similar for minimizing player
```

### Performance Optimizations

#### 1. Transposition Table
Cache previously calculated positions to avoid redundant computation.

#### 2. Move Ordering
Order moves by likely strength:
1. Immediate wins/blocks
2. Forcing moves (fours, double threes)
3. Strong positional moves
4. Less promising moves

#### 3. Selective Search
Focus computational resources on forcing sequences and critical positions.

#### 4. Opening Book
Pre-calculate optimal openings for first 8-10 moves to save computation.

### Difficulty Scaling
For adjustable difficulty:
- **Beginner**: Limited search depth (2-3 ply), basic pattern recognition
- **Intermediate**: Medium search depth (4-6 ply), good pattern recognition  
- **Advanced**: Deep search (8+ ply), complete VCF/VCT calculation
- **Expert**: Full strength with opening book and endgame databases

### Testing Framework
Implement these test scenarios:
1. **Tactical puzzles**: Known VCF/VCT positions
2. **Opening variations**: Play against known opening sequences
3. **Endgame positions**: Complex calculation scenarios
4. **Performance tests**: Speed and accuracy benchmarks

This comprehensive guide provides the foundation for implementing a strong Gomoku bot that can guarantee wins as Black and achieve optimal defense as White.
